/*
 Шаги реализации

1. Определитесь с классом, который будет играть роль контекста. Это может быть как существующий класс, в котором уже есть зависимость от состояния, так и новый класс, если код состояний размазан по нескольким классам.
2. Создайте общий интерфейс состояний. Он должен описывать методы, общие для всех состояний, обнаруженных в контексте. Заметьте, что не всё поведение контекста нужно переносить в состояние, а только то, которое зависит от состояний.
3. Для каждого фактического состояния создайте класс, реализующий интерфейс состояния. Переместите код, связанный с конкретными состояниями в нужные классы. В конце концов, все методы интерфейса состояния должны быть реализованы во всех классах состояний.
    При переносе поведения из контекста вы можете столкнуться с тем, что это поведение зависит от приватных полей или методов контекста, к которым нет доступа из объекта состояния. Существует парочка способов обойти эту проблему.
    Самый простой — оставить поведение внутри контекста, вызывая его из объекта состояния. С другой стороны, вы можете сделать классы состояний вложенными в класс контекста, и тогда они получат доступ ко всем приватным частям контекста. Но последний способ доступен только в некоторых языках программирования (например, Java, C#).
4. Создайте в контексте поле для хранения объектов-состояний, а также публичный метод для изменения значения этого поля.
5. Старые методы контекста, в которых находился зависимый от состояния код, замените на вызовы соответствующих методов объекта-состояния.
6. В зависимости от бизнес-логики, разместите код, который переключает состояние контекста либо внутри контекста, либо внутри классов конкретных состояний.
 */

//2
protocol State {
    func on(printer: Printer)
    func off(printer: Printer)
    func printDocument(printer: Printer)
}

//1
class Printer {
    
    //Волшебна строчка ))) включает все все возможные состояния
    private var state: State
    
    init() {
        self.state = Off()
    }
    
    private func set(state: State) {
        self.state = state
    }
    
    func turnOn() {
        state.on(printer: self)
    }
    
    func turnOff() {
        state.off(printer: self)
    }
    
    func printDocument() {
        state.printDocument(printer: self)
    }
    
    //3
    class On: State {
        func on(printer: Printer) {
            print("Принтер уже включен")
        }
        
        func off(printer: Printer) {
            print("Принтер включается")
        }
        
        func printDocument(printer: Printer) {
            print("Документ начинает печататься")
            printer.set(state: Print())
        }
    }

    class Off: State {
        func on(printer: Printer) {
            print("Принтер включается")
            printer.set(state: On())
        }
        
        func off(printer: Printer) {
            print("Принтер уже выключен")
        }
        
        func printDocument(printer: Printer) {
            print("Сначала включи принтер")
        }
    }
    
    class Print: State {
        func on(printer: Printer) {
            print("Принтер уже включен и печатает")
        }
        
        func off(printer: Printer) {
            print("После завершение печати документа принтер выключится")
            printer.set(state: Off())
        }
        
        func printDocument(printer: Printer) {
            print("Документ уже печататься")
        }
    }
}

let printer = Printer()

printer.turnOn()
printer.turnOn()
printer.printDocument()
printer.turnOff()
printer.turnOff()
printer.printDocument()
printer.turnOff()
printer.turnOn()
